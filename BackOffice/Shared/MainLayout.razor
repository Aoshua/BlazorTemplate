@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inherits LayoutComponentBase
@inject ProtectedSessionStorage SessionStore

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Backoffice</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private bool isDarkMode { get; set; }
    private MudThemeProvider themeProvider = new();
    private MudTheme theme = new MudTheme()
        {
            Typography = new Typography()
            {
                Default = new Default()
                {
                    FontFamily = new[] { "Nunito", "Helvetica" }
                }
            },
            Palette = new PaletteLight()
            {
                Primary = Settings.PrimaryColor
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Settings.PrimaryColor
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await themeProvider.GetSystemPreference();
            await SessionStore.SetAsync(SessionKeys.IsDarkMode, isDarkMode);
            StateHasChanged();
        }
    }
}